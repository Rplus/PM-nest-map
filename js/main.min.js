'use strict';

function getPosition() {
  const urlParams = new URLSearchParams(location.search);

  const lat = urlParams.get('lat') || localStorage.getItem('lat') || 25.052920;
  const lng = urlParams.get('lng') || localStorage.getItem('lng') || 121.556237;
  const zoom = urlParams.get('zoom') || localStorage.getItem('zoom') || 15;

  return {
    latLng: [+lat, +lng],
    zoom: +zoom,
  };
}

let urls = {
  GAS: 'https://script.google.com/macros/s/AKfycbwv0HHiEgWwxtdasGMxrBRf5zD3CP8Yip-2PPegoVhmdRMAu-9_/dev?id=1N9aa3LZMaFwNbjUSGVD9NloBNE7sM0DY318-DtZHzVo',
};

function toJSON(d) {
  return d.json();
}

function fetchJSON(url) {
  return fetch(url).then(toJSON);
}

function getPlanText(str) {
  var text = document.createTextNode(str);
  var p = document.createElement('p');
  p.appendChild(text);
  return p.innerHTML;
}

// export function myFetch(url, type = 'json') {
//   return fetch(url).then(res => {
//     switch (type) {
//       case 'text':
//         return res.text();
//       case 'json':
//       default:
//         return res.json();
//     }
//   })
// }


function navigation(targetLngLat, nowLngLat) {
  if (navigator.userAgent.match(/android/i)) {
    return `google.navigation:q=${targetLngLat}&mode=w`;
  } else if (nowLngLat == 'undefined,undefined') {
    return `http://maps.google.com?q=${targetLngLat}`;
  } else {
    if (navigator.userAgent.match(/(iphone|ipod|ipad);?/i)) {
      return `comgooglemaps://?saddr=&daddr=${targetLngLat}&directionsmode=Driving&zoom=15`;
    } else {
      return `https://www.google.com.tw/maps/dir/${targetLngLat}/${nowLngLat}/@24,120.5,10z/data=!3m1!4b1!4m2!4m1!3e0`;
    }
  }  return '';
}

function createMarkerContent(report) {
  let googleNavigation = navigation(
    `${report.lat},${report.lng}`,
    `${window.info.nowlatlng.lat},${window.info.nowlatlng.lng}`
  );

  return `
    <div class="popup-content">
      #${report.dex} ${report.name}: ${report.scale}+/hr
      <div class="note">${getPlanText(report.note || '')}</div>
      <hr>
      <div class="popup-content--footer">
        <a class="fix-reoprt" href="###"
          data-lat="${report.lat}"
          data-lng="${report.lng}"
          data-scale="${report.scale}"
          data-name="${report.name}"
          data-note="${report.note || ''}"
          data-dex="${report.dex}"
        >
          Êõ¥Êñ∞üëä
        </a>
        <a href="${googleNavigation}" target="_blank">Go‚ÜóÔ∏è</a>
      </div>
    </div>
  `;
}

function setMark(report) {
  let iconSize = map.getZoom() < 14 ? 32 : 48;

  let marker = Leaflet.marker(
    [report.lat, report.lng],
    {
      icon: L.divIcon({
        className: `poke-icon poke-icon-${report.dex}`,
        html: `
          <img
            class="pm-img"
            src="./img/z/${report.dex}.png"
            title="#${report.dex} ${report.name}, ${report.scale}+/hr"
          >`,
        iconSize: [iconSize, iconSize],
        iconAnchor: [iconSize / 2, iconSize / 2],
        popupAnchor: [0, -iconSize / 3]
      }),
      title: `${report.scale}`,
      report: report,
    }
  )
  .bindPopup(createMarkerContent(report), {
    autoPan: false,
  });

  window.markers.set(`${report.lat},${report.lng}`, marker);
}

function getData() {
  console.log('re-fetching~~~');

  if (window.markers) {
    earseMarkers(window.markers);
  }

  Promise.all([
    fetchJSON(urls.GAS),
  ])
  .then(d => {
    let data = d[0].data;
    console.log(data);
    window.markers = new Map();
    data.forEach(setMark);
    renderMarkersInView();
  });
}

/* global L */


window.Leaflet = window.L;
const map = Leaflet.map('map');
window._map = map;

let position = getPosition();

map
  .on('moveend', setPosition)
  .on('moveend', renderMarkersInView)
  .on('load', onLoad)
  .on('locationfound', onLocationFound)
  .on('locationerror', onLocationError)
  .setView(position.latLng, position.zoom);


Leaflet.tileLayer('https://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',{
    maxZoom: 20,
    subdomains:['mt0','mt1','mt2','mt3']
  }).addTo(map);



function setPosition() {
  if (!map) { return; }

  let geo = map.getCenter();
  let [lat, lng] = [geo.lat, geo.lng];

  localStorage.setItem('lat', lat);
  localStorage.setItem('lng', lng);
  localStorage.setItem('zoom', map.getZoom());
}

let markersInView = [];
function renderMarkersInView() {
  let bounds = map.getBounds();

  let checkInView = (_marker, _latLng) => {
    let inView = bounds.contains(L.latLng.apply(null, _latLng.split(',')));

    if (inView) {
      markersInView.push(_marker);
      _marker.addTo(map);
      if (_marker.isDoubtful) {
        _marker._icon && _marker._icon.classList.add('is-doubtful');
      }
    }
    return inView;
  };

  if (window.markers) {
    earseMarkers(markersInView); // clear markers in view at first
    markersInView = [];
    window.markers.forEach(checkInView);
  }
}


function onLoad() {
  getData();
  setPosition();
}

function onLocationFound(e) {
  window.info.nowlatlng = e.latlng;
  const radius = e.accuracy / 2;
  if (map.circle) {
    map.removeLayer(map.circle);
  }
  map.circle = Leaflet.circle(e.latlng, radius).addTo(map);
}

function onLocationError(e) {
  console.warn(e.message);
  document.title = `[GG] - ${document.title}`;
}

function earseMarkers(markers) {
  markers.forEach(m => map.removeLayer(m));
}

function createLocateBtn() {
  let dom = document.createElement('button');
  dom.id = 'locate-me';
  dom.innerText = '‚¶ø';
  dom.addEventListener('click', locateMe);
  return dom;
}

function locateMe() {
  map.locate({
    setView: true,
    maxZoom: Math.max(map.getZoom(), 16)
  });
}

let locateMeBtn = createLocateBtn();

function createReFetchBtn() {
  let dom = document.createElement('button');
  dom.id = 're-fetch';
  dom.innerText = '‚Üª';
  dom.addEventListener('click', getData);
  return dom;
}

let reFetchBtn = createReFetchBtn();

function postData(_dialog) {
  let data = new URLSearchParams({
    'dex': _dialog.elm.dex.value,
    'lat': _dialog.elm.lat.value,
    'lng': _dialog.elm.lng.value,
    'scale': _dialog.elm.scale.value,
    'note': _dialog.elm.note.value,
    'type': _dialog.elm.type.value,
    'uid': navigator.userAgent.replace(/\D/g, ''),
    'timestamp': +new Date(),
    'id': window.info.SpreadsheetId,
  });

  return fetch(_dialog.elm.form.action, {
    method: 'POST',
    body: data.toString(),
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
  })
  .then(toJSON);
}

let _dialog = document.createElement('dialog');
_dialog.id = 'dialog';
window._dialog = _dialog;

_dialog.innerHTML = `
  <form id="report-form" class="report-form" action="${urls.GAS}">
    <dl class="report-content">
      <dd id="rp-data--latlng-box">
        <input required type="hidden" id="rp-data--lat" value="">
        <input required type="hidden" id="rp-data--lng" value="">
      </dd>

      <dt>ÂØ∂ÂèØÂ§¢Á∑®ËôüÔºö</dt>
      <dd id="rp-data--dex-box">
        <input required id="rp-data--dex" type="text" list="rp-data--pm-list">
        <datalist id="rp-data--pm-list"></datalist>
      </dd>

      <dt>Â∑¢Á©¥Ë¶èÊ®°(ÊØèÂ∞èÊôÇÊï∏Èáè)Ôºö</dt>
      <dd id="rp-data--scale-box">
        <select required id="rp-data--scale">
          <option value="1" label="1~5"></option>
          <option value="5" label="5+"></option>
          <option value="15" label="15+"></option>
        </select>
      </dd>

      <dt>Â∑¢Á©¥/ÈáçÁîüÈªûË®ªËß£Ôºö</dt>
      <dd id="rp-data--note-box">
        <input id="rp-data--note" type="text">
      </dd>

      <dd>
        <input required type="hidden" readonly id="rp-data--type" value="">
      </dd>
    </dl>
    <div class="submit-box">
      <input id="submit" disabled type="submit" />
    </div>
  </form>
  <button id="close-dialog">‚ùå</button>
  `;


_dialog.elm = {
  lat: _dialog.querySelector('#rp-data--lat'),
  lng: _dialog.querySelector('#rp-data--lng'),
  dex: _dialog.querySelector('#rp-data--dex'),
  pmList: _dialog.querySelector('#rp-data--pm-list'),
  scale: _dialog.querySelector('#rp-data--scale'),
  type: _dialog.querySelector('#rp-data--type'),
  note: _dialog.querySelector('#rp-data--note'),
  submit: _dialog.querySelector('#submit'),
  closeBtn: _dialog.querySelector('#close-dialog'),
  form: _dialog.querySelector('form'),
};

_dialog.elm.closeBtn.addEventListener('click', _dialog.close.bind(_dialog));


// init pm names
fetchJSON(`${urls.GAS}&method=get_pm_name`)
.then(d => {
  _dialog.elm.pmList.innerHTML = d.map(
    (name, idx) => `<option value="${idx + 1}" label="${idx + 1} - ${name}"></option>`
  ).join('');
});


function validateForm(arg = {}) {
  _dialog.elm.submit.disabled = arg.forceDisabled || !_dialog.elm.form.checkValidity();
}
function submitFn(e) {
  e.preventDefault();
  validateForm({ forceDisabled: true });

  postData(_dialog)
  .then(d => {
    validateForm();
    _dialog.close();
    getData();
  });
}
_dialog.elm.form.addEventListener('submit', submitFn);
_dialog.elm.form.addEventListener('change', validateForm);

_dialog.initReport = (param) => {
  if (_dialog.open) {
    return;
  }
  console.log(param);
  _dialog.elm.lat.value = param.lat;
  _dialog.elm.lng.value = param.lng;
  _dialog.elm.dex.value = param.dex || '';
  _dialog.elm.scale.value = param.scale || '';
  _dialog.elm.note.value = param.note || '';
  _dialog.elm.type.value = (param.new ? 'new' : 'update');

  validateForm();

  _dialog.showModal();
};

/* global _map */

function addReport(params) {
  let { lat, lng } = _map.getCenter();

  let defaultParams = {
    lat,
    lng,
    scale: 1,
    new: true,
    note: '',
  };

  _dialog.initReport({
    ...defaultParams,
    ...params,
  });
}
document.body.addEventListener('click', (e) => {
  if (e.target.className === 'fix-reoprt') {
    let data = e.target.dataset;
    console.log(data);

    addReport({
      lat: +data.lat,
      lng: +data.lng,
      scale: +data.scale,
      dex: +data.dex,
      new: !!data.new,
      note: data.note,
    });
  }
});

function createAddReportBtn() {
  let dom = document.createElement('button');
  dom.id = 'add-report';
  dom.innerText = '+';
  dom.addEventListener('click', addReport);
  return dom;
}

let addReportBtn = createAddReportBtn();

let filterBoxClass = 'filters';

function createIndicator(dom) {
  return (`
    <input type="checkbox" name="Filter" id="Filter">
    <label for="Filter">Filter</label>
    <div class="${filterBoxClass}">
      <style>${dom.style}</style>
      ${dom.filter}
    </div>
  `);
}

var scales = [1, 5, 15];
let dom = scales.reduce((all, scale) => {
  all.input.push(`
    <input
      type="checkbox"
      class="ckbox-filter"
      id="ckbox_${scale}" checked />`);
  all.label.push(`<label class="filter-label" for="ckbox_${scale}" data-scale="${scale}"></label>`);
  all.style.push(`
    #ckbox_${scale}:not(:checked) ~ #map .poke-icon[title="${scale}"] { display: none; }
    #ckbox_${scale}:not(:checked) ~ .ctrls label[data-scale="${scale}"] { filter: contrast(0%); }
  `);
  return all;
}, { input: [], label: [], style: [] });

document.querySelector('#map').insertAdjacentHTML('beforebegin', dom.input.join(''));

let filterIndicator = createIndicator({
  style: dom.style.join(''),
  filter: dom.label.join(''),
});

let ctrls = document.createElement('div');
ctrls.className = 'ctrls';

ctrls.appendChild(addReportBtn);
ctrls.appendChild(locateMeBtn);
ctrls.appendChild(reFetchBtn);
ctrls.insertAdjacentHTML('beforeend', filterIndicator);

let centerMark = document.createElement('span');
centerMark.id = 'center-mark';

window.info = {
  nowlatlng: {},
  SpreadsheetId: '1N9aa3LZMaFwNbjUSGVD9NloBNE7sM0DY318-DtZHzVo',
};

document.body.appendChild(ctrls);
document.body.appendChild(_dialog);
document.body.appendChild(centerMark);
